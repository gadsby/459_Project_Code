%%% This is the main code to run the optimization.
%%% This code doesn't include the mass properties of an exoskeleton
%clear all
close all
clc
tic
%% Defining initial position and angular velocity as well as other parameters
global L0 L1 L2 L3 L4 M1 M2 M3 rCOM_1 rCOM_2 rCOM_3 g rG_1 rG_2 rG_3 Torque_2 Torque_3 teta_01 teta_02 teta_03 dteta_01 dteta_02 dteta_03 t_final dt  Time var_array_length 

L = 1.60;  % Total height of the human subject
M = 53.7;  % Total mass of the human subject
L0 = 0.039*L; % foot height
L1 = (0.285-0.039)*L; % Shank length
L2 = (0.53-0.285)*L; % Thigh length
L3 = (0.818-0.53)*L; % Trunk length
L4 = (1-0.818)*L; % Head and neck length
rCOM_1 = 0.394; % Distal distance of center of mass of the foot and shank segment given as a percent of shank length
rCOM_2 = 0.567; % Distal distance of center of mass of the thigh segment given as a percent of thigh length
rCOM_3 = 0.626; % Proximal distance of center of mass of the HAT (Head, Arms, Trunk) segment given as a percent of trunk length
rG_1 = 0.572; % Distal radius of gyration of the foot and shank segment given as a percent of shank length
rG_2 = 0.653; % Distal radius of gyration of the thigh segment given as a percent of thigh length
rG_3 = 0.798; % Proximal radius of gyration of HAT segment given as percent of trunk length
M1 = 0.061*M; % Foot and shank mass
M2 = 0.1*M; % Thigh mass
M3 = 0.5*(0.678*M); % Half the mass of the HAT segment
g = 9.8; % gravitational acceleration
Torque_2 = -12; % Applied torque at the knee joint to generate the initial guess
Torque_3 = 3; % Applied torque at the hip joint to generate the initial guess

teta_01 = pi/2+5*pi/180; % Ankle angle - Initial condition
teta_02 = 40*pi/180; % Knee angle - Initial condition
teta_03 = -40*pi/180; % Hip angle - Initial condition
dteta_01 = 0 ; % Ankle angular velocity - Initial condition
dteta_02 = 0; % Knee angular velocity - Initial condition
dteta_03 = 0; % Hip angular velocity - Initial condition

t_final = 0.5; % Pre-set terminal time
dt = 0.01; % time step
Time = 0:dt:t_final;
var_array_length = length(Time); % Length of the array defining each design varibale
%% Defining initial guess for the optimization
[Y_0,X_0] = ini_guess;
%% plotting the motion generated by the defined initial condition
ini_guess_impact = ini_guess_motion(X_0);
%% Defining the upper and lower bounds of design variables (states)
[Y_lb,Y_ub] = lub;
% %% Solving the optimization problem
% options = optimoptions(@fmincon,'Algorithm','active-set','MaxFunEvals',10^8,'MaxIter',4000,'TolX',1e-6,'TolCon',1e-6,'TolFun',1e-6,'Display','iter'); % setting desirable options for the optimization 
% [Y,fval,exitflag,output] = fmincon(@Obj_Fcn,Y_0,[],[],[],[],Y_lb,Y_ub,@NonLin_Cons,options); % running the fmincon optimization
%% Generate CSV for state variables
generateCSV(Y, 'stateVariables.csv');
%% Plotting the motion of the optimal solution
optimal_result_impact = optim_result_motion(Y);
%% Plotting the joint characteristics during the fall including joint angle, angular velocity and torque
%Result_plotting(Y,X_0,optimal_result_impact,ini_guess_impact,Time);
%% Saving data
%save('Results')
toc

genControllers('stateVariables.csv', 'dataForPi.csv')

